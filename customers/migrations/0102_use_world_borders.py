# Generated by Django 2.2.24 on 2021-12-06 15:34

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('world', '0009_populate_borders'),
        ('customers', '0101_django_32_field_changes'),
    ]

    operations = [
        migrations.RenameField(
            model_name='customer',
            old_name='region',
            new_name='agricultural_region',
        ),
        migrations.RenameField(
            model_name='customer',
            old_name='address_county',
            new_name='old_address_county',
        ),
        migrations.RenameField(
            model_name='customer',
            old_name='address_sub_county',
            new_name='old_sub_county',
        ),
        migrations.RenameField(
            model_name='customer',
            old_name='address_ward',
            new_name='old_ward',
        ),
        migrations.RenameField(
            model_name='customer',
            old_name='address_village',
            new_name='village',
        ),
        # Work-around a bug(?) in django migrations. Renaming a field with a foreign
        # key is supposed to rename the index. But creating an identically named field,
        # also with a foreign key, in the same migration, causes django to attempt to create
        # a duplicate index. This work-around sets db_index=False to remove the original index.
        migrations.AlterField(
            model_name='customer',
            name='county',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='customers', to='world.County', db_index=False,),
        ),
        migrations.RenameField(
            model_name='customer',
            old_name='county',
            new_name='old_county',
        ),
        migrations.AlterField(
            model_name='customer',
            name='village',
            field=models.CharField(max_length=120, verbose_name='village'),
        ),
        migrations.AddField(
            model_name='customer',
            name='country',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='country_of', to='world.Border'),
        ),
        migrations.AddField(
            model_name='customer',
            name='subcounty',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='subcounty_of', to='world.Border'),
        ),
        migrations.AddField(
            model_name='customer',
            name='ward',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='ward_of', to='world.Border'),
        ),
        # Following on from the comment above, this creates the new field with
        # same name as an older field, but creates a new index for the foreign key.
        # ...by not setting db_index=False...
        migrations.AddField(
            model_name='customer',
            name='county',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='county_of', to='world.Border'),
        ),
    ]
