# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-10-14 11:15


import logging

from django.conf import settings
from django.contrib.gis.db.models.functions import Distance
from django.db import migrations

logger = logging.getLogger(__name__)


def add_counties(apps, schema_editor):
    Customer = apps.get_model('customers', 'Customer')
    County = apps.get_model('world', 'County')
    # For customers with a location
    customers = Customer.objects.exclude(location=None).only('location')
    for county in County.objects.all():
        in_county = customers.filter(location__coveredby=county.border)
        in_county.update(county=county)
    # Check for any customers we have not found a county for
    # County border data is not great...
    still_no_county = customers.filter(county=None)
    for customer in still_no_county:
        # Lets find the closest county and just go with that
        cutoff = settings.WORLD_COUNTY_DISTANCE_CUTOFF
        closest_county = (County.objects
                                .annotate(distance=Distance('border', customer.location))
                                .filter(distance__lt=cutoff.m)
                                .order_by('distance')
                                .first())
        if county:
            customer.county = closest_county
            customer.save(update_fields=['county'])
        else:
            logger.warning("Failed to find county for {}".format(customer))


def remove_counties(apps, schema_editor):
    Customer = apps.get_model('customers', 'Customer')
    Customer.objects.update(county=None)


class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0067_customer_county'),
    ]

    operations = [
        migrations.RunPython(add_counties, remove_counties)
    ]
