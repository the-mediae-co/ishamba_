# Generated by Django 2.2.24 on 2021-12-05 21:26

from django.db import migrations
from django.conf import settings
from django.db.models import Q


def update_foreignkey_mappings(apps, schema_editor):
    db = settings.DATABASES['default']
    db_name = db.get('NAME')
    db_schema = db.get('SCHEMA')
    db_alias = schema_editor.connection.alias

    # Set every Kenyan customer's country to be Kenya
    Customer = apps.get_model("customers", "Customer")  # NOQA
    County = apps.get_model("world", "County")  # NOQA
    Border = apps.get_model("world", "Border")  # NOQA

    kenya_id = Border.objects.using(db_alias).get(country='Kenya', level=0).id
    kenyans = Customer.objects.using(db_alias).filter(Q(phone__startswith='+254') | Q(phone__startswith='+492'))
    kenyans.update(country_id=kenya_id)

    # Fix an (apparent) incorrect county names that cause mapping issues
    County.objects.using(db_alias).filter(name='Nithi').update(name='Tharaka Nithi')

    # Remove old ward, county and subcounty values of '-'
    Customer.objects.using(db_alias).filter(old_address_county='-').update(old_address_county='')
    Customer.objects.using(db_alias).filter(old_address_county__regex=r'^\d+$').update(old_address_county='')
    Customer.objects.using(db_alias).filter(old_sub_county='-').update(old_sub_county=None)
    Customer.objects.using(db_alias).filter(old_sub_county='--').update(old_sub_county=None)
    Customer.objects.using(db_alias).filter(old_ward='-').update(old_ward='')

    # Map old county foreign keys to new table via county name
    with schema_editor.connection.cursor() as cursor:
        sql = f"UPDATE {schema_editor.connection.schema_name}.customers_customer " \
              f"SET county_id = (SELECT id FROM world_border wb " \
              f"WHERE wb.level = 1 AND wb.country = 'Kenya' " \
              f"AND wb.name = (SELECT wc.name FROM world_county wc WHERE wc.id = old_county_id)) " \
              f"WHERE old_county_id IS NOT NULL"
        cursor.execute(sql, )


def reverse_foreignkey_mappings(apps, schema_editor):

    # The County will be removed in 0102, so we leave it alone here.

    # Ignore the (apparent) incorrect county names that caused mapping issues

    # Ignore the prior incorrect subcounty and ward values.

    # Map county foreign keys to old table via county name
    with schema_editor.connection.cursor() as cursor:
        sql = f"UPDATE {schema_editor.connection.schema_name}.customers_customer " \
              f"SET old_county_id = (SELECT id FROM world_county wc " \
              f"WHERE wc.name = (SELECT wb.name FROM world_border wb WHERE wb.id = county_id)) " \
              f"WHERE county_id IS NOT NULL"
        cursor.execute(sql, )


class Migration(migrations.Migration):

    dependencies = [
        ('customers', '0102_use_world_borders'),
        ('world', '0009_populate_borders'),
    ]

    operations = [
        migrations.RunPython(update_foreignkey_mappings, reverse_foreignkey_mappings),
    ]
