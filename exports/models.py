from random import SystemRandom

from django.core.files.storage import default_storage
from django.db import models
import heatmap as hm
from ishamba.settings import MEDIA_ROOT

from datetime import timedelta

from django.conf import settings
from django.contrib.contenttypes.models import ContentType
from django.utils.translation import gettext_lazy as _

from model_utils import Choices


def media_root_fn(*args, **kwargs):
    """ being used to avoid creating migrations on every computer that runs this project"""
    return settings.MEDIA_ROOT


class BaseExport(models.Model):
    """ Abstract model for storing exports of other data models.
    """
    # constants
    STATUS = Choices(
        (0, 'failed', _('Failed')),
        (1, 'queued', _('Queued')),
        (2, 'started', _('Started')),
        (3, 'complete', _('Complete')),
    )

    # export QuerySet fields
    content_type = models.ForeignKey(ContentType,
                                     on_delete=models.SET_NULL,
                                     verbose_name=_('Export type'),
                                     null=True)
    filters = models.JSONField(default=dict)
    fields = models.JSONField(default=dict)

    # record keeping fields
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL,
                                   on_delete=models.SET_NULL,
                                   null=True)
    created_at = models.DateTimeField(_("Created at"), auto_now_add=True)
    started_at = models.DateTimeField(_("Started at"), null=True, blank=True)
    completed_at = models.DateTimeField(_("Completed at"),
                                        null=True,
                                        blank=True)
    status = models.PositiveSmallIntegerField(_("Status"),
                                              choices=STATUS,
                                              default=STATUS.queued)

    exported_file = models.FilePathField(
        path=media_root_fn,
        max_length=256,
        match=r'.csv$',
        blank=True
    )

    class Meta:
        abstract = True

    @property
    def duration(self):
        """ The duration of the export, if it is complete, otherwise None.
        """
        if self.started_at and self.completed_at:
            return timedelta(self.started_at, self.completed_at)

    @property
    def url(self):
        if not self.exported_file:
            return None

        return default_storage.url(self.exported_file)

    @property
    def export_queryset(self):
        """ Builds a `QuerySet` object from `self.content_type`,
        `self.filters`, and `self.fields`.
        """
        model = self.content_type.model_class()

        return (model._default_manager.filter(**self.filters)
                                      .values(*self.fields['fields'])
                                      .distinct())

    def export_sql_with_params(self):
        """ Generates a custom SQL query that uses the SQL generated by
        `self.export_queryset` to STDOUT.
        """
        qs_query, params = self.export_queryset.query.sql_with_params()

        query = "COPY ({query}) TO STDOUT DELIMITER ',' CSV HEADER".format(
            query=qs_query
        )

        return query, params

    def generate_filename(self):
        """ Generates a new random filename for the `Export.exported_file`.
        """
        return '{:032x}.csv'.format(SystemRandom().getrandbits(256))


class MapExport(BaseExport):

    map_file = models.FilePathField(
        path=media_root_fn,
        max_length=256,
        match=r'.png$',
        blank=True
    )

    @property
    def url(self):
        if not self.map_file:
            return None

        return default_storage.url(self.map_file)

    @property
    def export_queryset(self):
        """ Builds a `QuerySet` object from `self.content_type`,
        `self.filters`, and `self.fields`.
        """
        model = self.content_type.model_class()

        return (model._default_manager.filter(**self.filters)
                                      .only(*self.fields['fields'])
                                      .distinct())

    def get_points(self):
        for c in self.export_queryset.iterator():
            latlng = c.location
            if not latlng:
                continue
            yield hm.Point(hm.LatLon(latlng.y, latlng.x))

    def get_map_config(self):
        """
        Return the map render settings
        """
        kernel = hm.LinearKernel(10)  # Radius of points in pixels (int)
        colors = hm.ColorMap(
            hsva_min=hm.ColorMap.str_to_hsva('02affff00'),
            hsva_max=hm.ColorMap.str_to_hsva('000ffffff')
        )
        config = hm.Configuration()
        config.osm = True  # Use an OSM background
        config.zoom = 6  # OSM zoom level
        config.kernel = kernel
        config.colormap = colors
        config.margin = 20  # Buffer around edge of map in pixels (int)
        return config

    def make_map_image(self, config):
        config.shapes = self.get_points()
        config.fill_missing()
        matrix = hm.process_shapes(config).finalized()
        return hm.ImageMaker(config).make_image(matrix)

    def generate_filename(self):
        return '{:032x}.png'.format(SystemRandom().getrandbits(256))


class Export(BaseExport):
    """
    Define a concrete export class. This class and its associated DB table
    and migrations used to be in the mediae_crm repo. Rather than change the
    table names, we now point this class to that existing table.
    """
    class Meta:
        db_table = "mcrm_exports_export"
