# Generated by Django 4.1.6 on 2023-02-14 14:33

from django.db import migrations


def convert_data(apps, schema_editor):
    """
        Converts:
           - Customer.CustomerMarketSubscription to the new Markets.MarketSubscription records
           - Note: CommoditySubscription.send_market_prices was used to determine whether market
                   updates should be sent to a customer, but did not contain a reference to the
                   market itself. We make the assumption that all customers with a
                   CustomerMarketSubscription are supposed to receive the updates, so don't
                   examine CommoditySubscription.send_market_prices.
    """
    CustomerMarketSubscription = apps.get_model('customers', 'CustomerMarketSubscription')  # noqa
    MarketSubscription = apps.get_model('markets', 'MarketSubscription')  # noqa

    # Convert CustomerMarketSubscriptions to MarketSubscriptions
    new_objs = []
    counter = 0
    for (customer_id, market_id, backup_id) in CustomerMarketSubscription.objects.values_list('customer_id', 'market_id', 'backup_id'):
        new_objs.append(
            MarketSubscription(
                customer_id=customer_id,
                market_id=market_id,
                backup_id=backup_id,
            )
        )
        counter += 1
        if counter % 100000 == 0:
            print(counter)
            if new_objs:
                MarketSubscription.objects.bulk_create(new_objs)
                new_objs = []

    if new_objs:
        MarketSubscription.objects.bulk_create(new_objs)

    print(f"Converted {counter} CustomerMarketSubscription to MarketSubscription")


def reverse_data(apps, schema_editor):
    """
        Reverses:
           - Customer.CustomerMarketSubscription to the new Markets.MarketSubscription records
    """
    CustomerMarketSubscription = apps.get_model('customers', 'CustomerMarketSubscription')  # noqa
    MarketSubscription = apps.get_model('markets', 'MarketSubscription')  # noqa

    existing_ids = list(CustomerMarketSubscription.objects.values_list('customer_id', 'market_id'))
    new_objs = []
    counter = 0
    for (customer_id, market_id, backup_id) in MarketSubscription.objects.values_list('customer_id', 'market_id', 'backup_id'):
        # The CustomerMarketSubscription objects may still exist, so don't create duplicates
        if not (customer_id, market_id) in existing_ids:
            new_objs.append(
                CustomerMarketSubscription(
                    customer_id=customer_id,
                    market_id=market_id,
                    backup_id=backup_id,
                )
            )
            counter += 1
            if counter % 100000 == 0:
                print(counter)
                if new_objs:
                    CustomerMarketSubscription.objects.bulk_create(new_objs)
                    new_objs = []

    if new_objs:
        CustomerMarketSubscription.objects.bulk_create(new_objs)


class Migration(migrations.Migration):
    dependencies = [
        ("markets", "0033_marketsubscription"),
    ]

    operations = [
        migrations.RunPython(convert_data, reverse_code=reverse_data),
    ]
