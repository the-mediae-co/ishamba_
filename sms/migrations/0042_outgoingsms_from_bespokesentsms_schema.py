# Generated by Django 2.2.24 on 2021-08-20 16:03

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion

import sms.models.outgoing
from core.utils.migration_operations import AlterModelBases


class Migration(migrations.Migration):
    """
    The schema migration, paired with the data migration, to
    convert BespokeSentSMS to OutgoingSMS.
    """
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sms', '0041_populate_smsresponse_pv_reminder'),
        ('tasks', '0016_change_task_priority_constraints'),
    ]

    operations = [
        # Changing the name of BespokeSentSMS to OutgoingSMS trips over a
        # Django bug because it's a base class for VoucherSentSMS.
        # https://stackoverflow.com/questions/61665607/renaming-a-django-superclass-model-and-updating-the-subclass-pointers-correctly
        # Step 1: First, we rename the parent link in our subclass to match their future name
        # migrations.RenameField(
        #     model_name='vouchersentsms',
        #     old_name='bespokesentsms_ptr',
        #     new_name='outgoingsms_ptr',
        # ),

        # Step 2: then, temporarily set the base model for
        #         our subclass to just `Model`, which makes
        #         Django think there are no parent links, which
        #         means it won't try to apply crashing logic in step 3.
        # AlterModelBases("VoucherSentSMS", (models.Model,)),

        # Step 3: Now we can safely rename the superclass without
        #         Django trying to fix subclass pointer
        migrations.RenameModel('BespokeSentSMS', 'OutgoingSMS'),

        # ...and correct the name of the pk sequence field.
        migrations.RunSQL(
            sql="ALTER SEQUENCE IF EXISTS ishamba.sms_bespokesentsms_id_seq RENAME TO sms_outgoingsms_id_seq;",
            reverse_sql="ALTER SEQUENCE IF EXISTS ishamba.sms_outgoingsms_id_seq RENAME TO sms_bespokesentsms_id_seq;"
        ),

        # Step 4: Which means we can now update the `parent_link`
        #         fields for the subclasses: even though we altered
        #         the model bases earlier, this step will restore
        #         the class hierarchy we actually need:
        # migrations.AlterField(
        #     model_name='vouchersentsms',
        #     name='outgoingsms_ptr',
        #     field=models.OneToOneField(auto_created=True,
        #                                on_delete=django.db.models.deletion.CASCADE, parent_link=True,
        #                                primary_key=True, serialize=False, to='sms.OutgoingSMS'),
        #     preserve_default=False,
        # ),

        # Make the changes to OutgoingSMS to prepare it for data consolidation
        migrations.AddField(
            model_name='outgoingsms',
            name='incoming_sms',
            field=models.ForeignKey(blank=True, default=None, null=True,
                                    on_delete=django.db.models.deletion.PROTECT,
                                    to='sms.IncomingSMS'),
        ),
        migrations.AddField(
            model_name='outgoingsms',
            name='message_type',
            field=models.CharField(
                choices=[('?', 'Unknown'), ('bulk', 'Bulk'), ('one', 'Individual'), ('task', 'Task_Response'),
                         ('auto', 'Template_Response'), ('new', 'New_Customer_Response'), ('tip', 'Agri_Tip'),
                         ('wxke', 'Weather_Kenmet'), ('wxpv', 'Weather_Plantvillage'), ('mkt', 'Market_Price'),
                         ('sub', 'Subscription_Notification'), ('vchr', 'Voucher'), ('wxmkt', 'Weather_And_Market')],
                default='?', max_length=8),
        ),
        migrations.AddField(
            model_name='outgoingsms',
            name='extra',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.AlterModelOptions(
            name='outgoingsms',
            options={'verbose_name': 'Outgoing SMS'},
        ),

        # Make the changes to SMSRecipient
        migrations.RenameField(
            model_name='smsrecipient',
            old_name='message_status',
            new_name='delivery_status',
        ),
        migrations.RenameField(
            model_name='smsrecipient',
            old_name='message_failure_reason',
            new_name='failure_reason',
        ),
        migrations.RenameField(
            model_name='smsrecipient',
            old_name='message_id',
            new_name='gateway_msg_id',
        ),
        migrations.AlterField(
            model_name='smsrecipient',
            name='page_index',
            field=models.PositiveSmallIntegerField(default=1),
        ),
        # Instead of the GenericRelation, move to a direct ForeignKey relationship
        migrations.AddField(
            model_name='smsrecipient',
            name='message',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='recipients', to='sms.OutgoingSMS'),
        ),
        migrations.AlterUniqueTogether(
            name='smsrecipient',
            unique_together=set(),
        ),
        migrations.AddConstraint(
            model_name='smsrecipient',
            constraint=models.UniqueConstraint(fields=('recipient', 'message', 'page_index'),
                                               name='unique_message_recipient'),
        ),
    ]
